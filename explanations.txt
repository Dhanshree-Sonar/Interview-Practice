Explanation for Interview Practice questions.

Question 1:
Given two strings s and t, determine whether some anagram of t is a substring of s. For example: if s = "udacity" and t = "ad", then the function returns True. Your function definition should look like: question1(s, t) and return a boolean True or False.

Clear the question:
- Will 's' be longer than 't'?
- Should we consider case sensitivity?

Confirm the input and output:
- Input: 2 strings. First is 's' and second is 't'.
- Output: Boolean

Discuss test cases:
- If any one of the parameters is not string then we can return Error.
- If length of the 't' is zero then we can return True.
- If 's' is smaller than 't', we can return False.

Solution explanation:
- First of all we have to convert both the strings to similar case as we are computing the result based on case insensitive characters.
- We have to scan 's' character by character. Each time, we have to retrieve the substring of 's'(starting at 'i'th position till the length of 't').
- We can compare sorted output of the substring and 't'. If it is true which means we have the anagram of 't' in 's'.

Complexity:
- We are scanning 's' character by character so worst case runtime complexity is O(n) where n is the number of characters in 's'.
- We are sorting string characters in each iteration. Sorting has time complexity O(nlog(n)). So the overall time complexity is O(n^2log(n)).
- The sorted function returns a new array with the sorted values, so your space is actually O(t).


Question 2:
Given a string a, find the longest palindromic substring contained in a. Your function definition should look like question2(a), and return a string.

Clear the question:
- Is there a limit on string length?
- If we have more than one result, which one we should consider?
- Can we assume empty string or single character string as a palindromic string?

Confirm the input and output:
- Input: A string
- Output: Longest palindromic string

Discuss test cases:
- We should compute output case insensitively. "Racecar" can be considered as an palindromic string.
- If input is not a string then we can return error.
- If length is 0 or 1 then we can return the string as it is.
- If string contains no palindromic substring, which is longer than 1 character, then we can return first character of the string.
- If two palindromic substrings are of same size we can consider the first one as a longest palindromic substring.

Solution explanation:
- Convert a string to lower case to compute the output case insensitively
- Start at the first character then from that character add one character at a time to form the substring and check if a substring is a palindromic.
- Compare the substring and its reversed string to check if the substring is palindromic or not
- If the string is palindromic then check if it is longer than the previous one. If it is longer, then consider the current substring as a longest palindromic string.
- Move to the next character of the string and start checking for palindromic substring

Complexity:
- We are scanning 'a' character by character and each time we are checking m substrings where m is the length of the characters from 'i'th position. So the runtime complexity is approximately O(n^2).
- We need to store a string in different variable which will be less than or equal to the original string, so the space complexity is O(2) which can be approximated to O(1).


Question 3:
Given an undirected graph G, find the minimum spanning tree within G. A minimum spanning tree connects all vertices in a graph with the smallest possible total weight of edges. Your function should take in and return an adjacency list structured like this:

{'A': [('B', 2)],
 'B': [('A', 2), ('C', 5)],
 'C': [('B', 5)]}
Vertices are represented as unique strings. The function definition should be question3(G).

Clear the question:
- What if the graph is empty?
- What if the graph has a single node?

Confirm the input and output:
- Input: A Dictionary (Vertex as a key and Edges as values)
- Output: A Dictionary (Vertex as a key and Edges as values)

Discuss test cases:
- If the graph is an empty dictionary then we will return empty dictionary.
- If the graph has a single vertex then we will return Error.
- If the graph is not in a dictionary format we will return Error.

Solution explanation:
- Use Kruskal's algorithm (Greedy algorithm) to find the minimum spanning tree
- Find out unique edges and sort them by weight
- Take edges one by one and form a tree till all vertices are covered. Skip the edge if it is forming a cycle.
- One way to check if edge is forming a cycle in the graph is by keep track of each vertex in a list of sets. If the new edge will connect two vertices within the same set, we will not include it. Else, we union of the sets and pop other set.

Complexity:

- It will take O(E) time to create list of unique edges.
- We are using python sort function to sort the edges so the time complexity for that will be O(Elog(E)).
- We need to loop through each edges, find indexes and merge the vertices set to add edges to MST. This will take worst case O(E*V) time.
- It will take O(E) time to form the output.
- So, overall algorithm will take O(E + Elog(E) + E*V + E) which can be approximated to O(E*V).
- We need vertices set (V) and edges set (E) so the space complexity is O(E+V), also we need a dictionary to store output graph (G). So the space complexity is O(V+E+G).


Question 4:
Find the least common ancestor between two nodes on a binary search tree. The least common ancestor is the farthest node from the root that is an ancestor of both nodes. For example, the root is a common ancestor of all nodes on the tree, but if both nodes are descendents of the root's left child, then that left child might be the lowest common ancestor. You can assume that both nodes are in the tree, and the tree itself adheres to all BST properties. The function definition should look like question4(T, r, n1, n2), where T is the tree represented as a matrix, where the index of the list is equal to the integer stored in that node and a 1 represents a child node, r is a non-negative integer representing the root, and n1 and n2 are non-negative integers representing the two nodes in no particular order. For example, one test case might be

question4([[0, 1, 0, 0, 0],
           [0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0],
           [1, 0, 0, 0, 1],
           [0, 0, 0, 0, 0]],
          3,
          1,
          4)
and the answer would be 3.

Clear the question:
- Can we assume that the root is in the tree?
- No values can be repeated twice for nodes?

Confirm the input and output:
- Input: Tree represented as a matrix (T), root (r), node1 (n1) and node2 (n2)
- Output: Node (Which is the least common ancestor between node1 and node2) value

Discuss test cases:
- If T is not a list or an empty list, we can return Error.
- If root or any node is negative or non-integer, we can return Error.
- If node1 and node2 similar then we can return error.
- If any node is similar as root then we can return error.
- If any node is greater than equal to T length which means it is not from the tree then we can return error.

Solution explanation:
- Create a Binary Search Tree using a private inner class BSTNode (Which has value, left child and right child).
- Using the definition of a BST, we can consider that if n1 and n2 both are smaller than r then LCA is in left side of the tree.
- If n1 and n2 both are greater than r then LCA is in right side of the tree. Otherwise, root is the LCA.
- Use recursion to keeps iterating through nodes until the common ancestor is the root.

Complexity:
- Program needs O(n) to Create a Binary Search Tree using a private inner class BSTNode.
- To find LCA we are scanning through number of node so in the worst case situation time complexity will be O(n). Overall time complexity would be O(2n).
- We need to store a n objects of BSTNode class, where n is the number of nodes. Space complexity would be O(n).

Question 5:
Find the element in a singly linked list that's m elements from the end. For example, if a linked list has 5 elements, the 3rd element from the end is the 3rd element. The function definition should look like question5(ll, m), where ll is the first node of a linked list and m is the "mth number from the end". You should copy/paste the Node class below to use as a representation of a node in the linked list. Return the value of the node at that position.

class Node(object):
  def __init__(self, data):
    self.data = data
    self.next = None

Clear the question:
- Can the list contain any type of objects?
- Is m always going to be less than or equal to the number of linked nodes?

Confirm the input and output:
- Input: Linked list (ll) and position (m)
- Output: 'm'th element from the end of the 'll'

Discuss test cases:
- If 'm' is non-integer then return error
- If 'm' is greater than length of 'll' then we can return None.
- If 'm' is smaller than or equal to 0 then return None.
- If 'm' is equal to length of the 'll' then we can return head element data

Solution explanation:
- Calculate the number of the nodes in linked list
- Subtract 'm' from the number to get the position to fetch the element
- Traverse the linked list till the position and return the data at that location

Complexity:
- To find the number of the nodes we have to traverse the linked list which take O(n) time complexity.
- To find 'm' position we have to again traverse the linked list which takes O(n) in worst cast. Total time complexity would be O(2n) which can be approximated to O(n)
- We don't require any other data structure to store the result so the space complexity is O(1).


References:
https://programmingpraxis.com/2010/10/15/find-the-longest-palindrome-in-a-string/
https://www.geeksforgeeks.org/greedy-algorithms-set-2-kruskals-minimum-spanning-tree-mst/
https://github.com/GeneDer/Technical-Interview
https://github.com/tonybastin/P7---Python_Project_Technical_Interview_Practise
